// server.js
// –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—à—å –ª–æ–∫–∞–ª—å–Ω–æ ‚Äî —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π .env
require('dotenv').config();

const express = require('express');
const session = require('express-session');
const openid = require('openid');
const cors = require('cors');
const { createClient } = require('@supabase/supabase-js');
const path = require('path');
const fetch = require('node-fetch'); // –í Node 18+ –µ—Å—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π fetch, –Ω–æ –æ—Å—Ç–∞–≤–∏–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.

const app = express();

// === –ö–æ–Ω—Ñ–∏–≥ –∏–∑ ENV ===
const PORT = process.env.PORT || 5000;
const ADMIN_STEAM_ID = "76561199838029880";
const BASE_URL = process.env.BASE_URL || 'https://critiqo-backend.up.railway.app';
const FRONTEND_ORIGIN = process.env.FRONTEND_ORIGIN || 'https://kitoy02241221.github.io';

if (!process.env.SUPABASE_URL || !process.env.SUPABASE_SERVICE_KEY || !process.env.SESSION_SECRET) {
  console.error('‚ùå Missing required env: SUPABASE_URL / SUPABASE_SERVICE_KEY / SESSION_SECRET');
  process.exit(1);
}

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_KEY
);

// Railway/–ø—Ä–æ–∫—Å–∏: –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã secure-cookies —Ä–∞–±–æ—Ç–∞–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
app.set('trust proxy', 1);

// === –õ–æ–≥–∏ ENV (–±–µ–∑ —É—Ç–µ—á–µ–∫ –∑–Ω–∞—á–µ–Ω–∏–π) ===
console.log("ENV CHECK:");
console.log("SUPABASE_URL length:", process.env.SUPABASE_URL.length);
console.log("SUPABASE_SERVICE_KEY exists:", !!process.env.SUPABASE_SERVICE_KEY);
console.log("SESSION_SECRET exists:", !!process.env.SESSION_SECRET);
console.log("BASE_URL:", BASE_URL);
console.log("FRONTEND_ORIGIN:", FRONTEND_ORIGIN);

// === CORS (—Ä–∞–∑—Ä–µ—à–∞–µ–º –∫—Ä–æ—Å—Å-–¥–æ–º–µ–Ω–Ω—ã–µ –∫—É–∫–∏) ===
const corsOptions = {
  origin: FRONTEND_ORIGIN,
  credentials: true,
  methods: ['GET','POST','PUT','DELETE','OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization']
};
app.use(cors(corsOptions));
// –Ø–≤–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ preflight
app.options('*', cors(corsOptions));

app.use(express.json());

// === –°–ï–°–°–ò–Ø ===
// –í–∞–∂–Ω–æ: sameSite:'none' + secure:true + trust proxy –≤—ã—à–µ
app.use(session({
  name: 'sid', // —Å–≤–æ—ë –∏–º—è –∫—É–∫–∏, —á—Ç–æ–±—ã –æ—Ç–ª–∏—á–∞—Ç—å –æ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ connect.sid
  secret: process.env.SESSION_SECRET,
  resave: false,
  saveUninitialized: false,
  cookie: {
    secure: true,        // —Ç—Ä–µ–±—É–µ—Ç—Å—è HTTPS
    httpOnly: true,      // –∫—É–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ JS
    sameSite: 'none',    // —á—Ç–æ–±—ã –∫—É–∫–∞ –µ—Ö–∞–ª–∞ –º–µ–∂–¥—É –¥–æ–º–µ–Ω–∞–º–∏ (github.io ‚Üí railway.app)
    // domain: –ù–ï —É–∫–∞–∑—ã–≤–∞–µ–º ‚Äî –ø—É—Å—Ç—å –±—É–¥–µ—Ç —Ö–æ—Å—Ç Railway; —Ç–∞–∫ –Ω–∞–¥—ë–∂–Ω–µ–µ.
    maxAge: 1000 * 60 * 60 * 24 * 7 // 7 –¥–Ω–µ–π
  }
}));

// –ü—Ä–æ—Å—Ç–æ–π –ª–æ–≥ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –Ω–∞–ª–∏—á–∏—è —Å–µ—Å—Å–∏–∏
app.use((req, res, next) => {
  console.log(`Request: ${req.method} ${req.url} | authUid: ${req.session?.authUid || 'none'}`);
  next();
});

// === Steam OpenID ===
const relyingParty = new openid.RelyingParty(
  `${BASE_URL}/auth/steam/return`, // returnUrl
  null,   // realm (–º–æ–∂–Ω–æ null)
  true,   // stateless
  false,  // strict mode
  []      // extensions
);

app.get('/auth/steam', (req, res) => {
  relyingParty.authenticate('https://steamcommunity.com/openid', false, (err, authUrl) => {
    if (err || !authUrl) {
      console.error('–û—à–∏–±–∫–∞ Steam OpenID:', err);
      return res.status(500).send('Steam –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.');
    }
    res.redirect(authUrl);
  });
});

app.get('/auth/steam/return', async (req, res) => {
  relyingParty.verifyAssertion(req, async (err, result) => {
    if (err || !result?.authenticated) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è Steam:', err);
      return res.redirect(`${BASE_URL}/?error=auth_failed`);
    }

    // –ó–∞—â–∏—Ç–∞ –æ—Ç —Å—Ç—Ä–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    const claimed = result.claimedIdentifier || '';
    const steamId = claimed.split('/').pop();
    if (!steamId) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å steamId –∏–∑ claimedIdentifier:', claimed);
      return res.redirect(`${BASE_URL}/?error=invalid_steamid`);
    }

    try {
      const { data: existingUsers, error: fetchError } = await supabase
        .from('Users')
        .select('auth_uid, steam_id')
        .eq('steam_id', steamId)
        .limit(1);

      if (fetchError) throw fetchError;

      let authUid;

      if (existingUsers && existingUsers.length > 0) {
        authUid = existingUsers[0].auth_uid;
        const { error: updateError } = await supabase
          .from('Users')
          .update({ last_login: new Date().toISOString() })
          .eq('auth_uid', authUid);
        if (updateError) throw updateError;
        console.log(`üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${steamId} –Ω–∞–π–¥–µ–Ω, –æ–±–Ω–æ–≤–ª—ë–Ω last_login`);
      } else {
        const { data: newUser, error: insertError } = await supabase
          .from('Users')
          .insert([{ steam_id: steamId, created_at: new Date().toISOString(), last_login: new Date().toISOString() }])
          .select()
          .single();
        if (insertError) throw insertError;
        authUid = newUser.auth_uid;
        console.log(`‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${steamId} —Å–æ–∑–¥–∞–Ω`);
      }

      req.session.authUid = authUid;
      req.session.steamId = steamId;

      req.session.save(err => {
        if (err) {
          console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:", err);
          return res.redirect(`${BASE_URL}/?error=session_save_failed`);
        }
        // –ú–æ–∂–Ω–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏—Ç—å –Ω–∞ —Ñ—Ä–æ–Ω—Ç, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å, –Ω–æ —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –∫–æ—Ä–µ–Ω—å –±—ç–∫–µ–Ω–¥–∞
        res.redirect(`${BASE_URL}/?id=${steamId}`);
      });
    } catch (dbErr) {
      console.error("–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π:", dbErr);
      res.redirect(`${BASE_URL}/?error=db_error`);
    }
  });
});

// === –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ —Å–µ—Å—Å–∏—è ===
app.get('/check-auth', (req, res) => {
  if (!req.session.authUid) return res.status(401).json({ authenticated: false });
  res.json({ authenticated: true });
});

app.get('/take-session-auth_id', (req, res) => {
  if (!req.session.authUid) return res.status(401).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
  res.json({ authUid: req.session.authUid });
});

app.get('/take-name', async (req, res) => {
  if (!req.session.authUid) return res.status(401).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });

  try {
    const { data, error } = await supabase
      .from('Users')
      .select('name')
      .eq('auth_uid', req.session.authUid)
      .single();
    if (error) throw error;

    res.json({ name: data?.name ?? null });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–º–µ–Ω–∏:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.put('/update-name', async (req, res) => {
  if (!req.session.authUid) return res.status(401).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });

  const { name } = req.body || {};
  if (!name || typeof name !== 'string') return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è' });

  try {
    const { data, error } = await supabase
      .from('Users')
      .update({ name })
      .eq('auth_uid', req.session.authUid)
      .select()
      .single();
    if (error) throw error;

    res.json({ success: true, name: data.name });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏:', err);
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–º—è' });
  }
});

// === –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç—ã –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
app.post('/increment-num-application', async (req, res) => {
  if (!req.session.authUid) return res.status(401).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });

  try {
    const { data: userData, error: fetchError } = await supabase
      .from('Users')
      .select('numAplication')
      .eq('auth_uid', req.session.authUid)
      .single();
    if (fetchError) throw fetchError;

    const current = userData?.numAplication ?? 0;
    const newValue = current + 1;

    const { error: updateError } = await supabase
      .from('Users')
      .update({ numAplication: newValue })
      .eq('auth_uid', req.session.authUid);
    if (updateError) throw updateError;

    res.json({ success: true, newValue });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ numAplication:', err);
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ' });
  }
});

app.get('/num-application', async (req, res) => {
  if (!req.session.authUid) return res.status(401).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });

  try {
    const { data, error } = await supabase
      .from('Users')
      .select('numAplication')
      .eq('auth_uid', req.session.authUid)
      .single();
    if (error) throw error;

    res.json({ numAplication: data?.numAplication ?? 0 });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ numAplication:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.get('/me', async (req, res) => {
  if (!req.session.authUid) return res.json({ isLoggedIn: false });

  try {
    const { data: user, error } = await supabase
      .from('Users')
      .select('auth_uid, steam_id, created_at, last_login')
      .eq('auth_uid', req.session.authUid)
      .single();
    if (error || !user) return res.json({ isLoggedIn: false });

    res.json({
      isLoggedIn: true,
      steamId: user.steam_id,
      isAdmin: user.steam_id === ADMIN_STEAM_ID,
      createdAt: user.created_at,
      lastLogin: user.last_login
    });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ /me:', err);
    res.json({ isLoggedIn: false });
  }
});

app.get('/logout', (req, res) => {
  // –ß–∏—Å—Ç–∏–º —Å–µ—Å—Å–∏—é + –∫—É–∫—É —Å —Ç–µ–º–∏ –∂–µ —Ñ–ª–∞–≥–∞–º–∏
  req.session.destroy(() => {
    res.clearCookie('sid', {
      secure: true,
      httpOnly: true,
      sameSite: 'none'
    });
    res.redirect(`${BASE_URL}/`);
  });
});

// –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç complite_aplication
app.post('/increment-application', async (req, res) => {
  if (!req.session.authUid) return res.status(401).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });

  try {
    const { data: userData, error: fetchError } = await supabase
      .from('Users')
      .select('complite_aplication')
      .eq('auth_uid', req.session.authUid)
      .single();
    if (fetchError) throw fetchError;

    const current = userData?.complite_aplication ?? 0;
    const newValue = current + 1;

    const { error: updateError } = await supabase
      .from('Users')
      .update({ complite_aplication: newValue })
      .eq('auth_uid', req.session.authUid);
    if (updateError) throw updateError;

    res.json({ success: true, newValue });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ complite_aplication:', err);
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ complite_aplication
app.get('/complite-aplication', async (req, res) => {
  if (!req.session.authUid) return res.status(401).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });

  try {
    const { data, error } = await supabase
      .from('Users')
      .select('complite_aplication')
      .eq('auth_uid', req.session.authUid)
      .single();
    if (error) throw error;

    res.json({ complite_aplication: data?.complite_aplication ?? 0 });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º OpenDota (–ø—Ä–æ—Å—Ç–æ–π forward)
app.get('/match/:id/opendota', async (req, res) => {
  const id = Number(req.params.id);
  if (!id) {
    return res.status(400).json({ error: '–ù–µ –ø–µ—Ä–µ–¥–∞–Ω match_id –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç' });
  }

  try {
    const response = await fetch(`https://api.opendota.com/api/matches/${id}`);
    if (!response.ok) {
      return res.status(502).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenDota' });
    }
    const rawData = await response.json();
    res.json(rawData);
  } catch (err) {
    console.error("–°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∫–∏
app.put('/update-profile-image', async (req, res) => {
  if (!req.session.authUid) {
    return res.status(401).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
  }

  const { imageUrl } = req.body || {};
  if (!imageUrl || typeof imageUrl !== 'string') {
    return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è' });
  }

  try {
    const { data, error } = await supabase
      .from('Users')
      .update({ profile_image: imageUrl })
      .eq('auth_uid', req.session.authUid)
      .select()
      .single();

    if (error) throw error;

    res.json({ success: true, profile_image: data.profile_image });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏:', err);
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É' });
  }
});

app.get("/get-user", (req, res) => {
  if (!req.session.authUid) {
    return res.status(401).json({ message: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" });
  }
  res.json({ user_auth_uid: req.session.authUid });
});

// Healthcheck –¥–ª—è Railway
app.get('/healthz', (_req, res) => res.status(200).send('ok'));

// === React build (–µ—Å–ª–∏ –∫–æ–≥–¥–∞-—Ç–æ –ø–µ—Ä–µ–µ–¥–µ—à—å –Ω–∞ –æ–¥–∏–Ω –¥–æ–º–µ–Ω) ===
// const clientBuildPath = path.join(__dirname, '../client/build');
// app.use(express.static(clientBuildPath));
// app.get('*', (req, res) => {
//   res.sendFile(path.join(clientBuildPath, 'index.html'));
// });

// === Start server ===
app.listen(PORT, () => {
  console.log(`‚úÖ Server running on port ${PORT}`);
});